name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-macos:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.x'
          channel: 'stable'
          cache: true

      - name: Install Transmission (for bundling)
        run: |
          brew install transmission

      - name: Bundle Transmission binary
        run: |
          mkdir -p gui/macos/Runner/Resources/bin
          cp $(which transmission-daemon) gui/macos/Runner/Resources/bin/
          chmod +x gui/macos/Runner/Resources/bin/transmission-daemon

          # Copy required dylibs
          mkdir -p gui/macos/Runner/Resources/lib

          # Get Transmission dependencies (excluding system libs)
          DYLIBS=$(otool -L $(which transmission-daemon) | grep -v '/usr/lib' | grep -v '/System' | awk '{print $1}' | tail -n +2)

          for dylib in $DYLIBS; do
            if [ -f "$dylib" ]; then
              cp "$dylib" gui/macos/Runner/Resources/lib/
            fi
          done

          # Fix library paths to be relative (CRITICAL for user machines)
          chmod +w gui/macos/Runner/Resources/bin/transmission-daemon
          install_name_tool -change /opt/homebrew/opt/libevent/lib/libevent-2.1.7.dylib @executable_path/../Resources/lib/libevent-2.1.7.dylib gui/macos/Runner/Resources/bin/transmission-daemon || true
          install_name_tool -change /opt/homebrew/opt/miniupnpc/lib/libminiupnpc.21.dylib @executable_path/../Resources/lib/libminiupnpc.21.dylib gui/macos/Runner/Resources/bin/transmission-daemon || true

          echo "✅ Transmission bundled successfully"

      - name: Download yt-dlp for macOS
        run: |
          echo "📥 Downloading yt-dlp..."
          curl -L -o gui/macos/Runner/Resources/bin/yt-dlp https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp_macos
          chmod +x gui/macos/Runner/Resources/bin/yt-dlp
          echo "✅ Downloaded yt-dlp for macOS"
          ls -lh gui/macos/Runner/Resources/bin/yt-dlp

      - name: Install dependencies
        run: |
          cd gui
          flutter pub get

      - name: Build macOS app
        run: |
          cd gui
          flutter build macos --release

      - name: Copy bundled binaries to app bundle
        run: |
          APP_PATH="gui/build/macos/Build/Products/Release/trusttune_gui.app"
          mkdir -p "$APP_PATH/Contents/Resources/bin"
          mkdir -p "$APP_PATH/Contents/Resources/lib"

          # Copy transmission binary and libs
          if [ -f gui/macos/Runner/Resources/bin/transmission-daemon ]; then
            cp gui/macos/Runner/Resources/bin/transmission-daemon "$APP_PATH/Contents/Resources/bin/"
            chmod +x "$APP_PATH/Contents/Resources/bin/transmission-daemon"

            # Fix library paths to use @loader_path (relative to binary, not main app)
            echo "🔧 Fixing library paths..."
            install_name_tool -change @executable_path/../Resources/lib/libevent-2.1.7.dylib @loader_path/../lib/libevent-2.1.7.dylib "$APP_PATH/Contents/Resources/bin/transmission-daemon" 2>/dev/null || true
            install_name_tool -change @executable_path/../Resources/lib/libminiupnpc.21.dylib @loader_path/../lib/libminiupnpc.21.dylib "$APP_PATH/Contents/Resources/bin/transmission-daemon" 2>/dev/null || true

            # Re-sign after modifying
            echo "🔏 Signing binary..."
            codesign --force --sign - "$APP_PATH/Contents/Resources/bin/transmission-daemon"
          fi

          if [ -d gui/macos/Runner/Resources/lib ]; then
            cp -r gui/macos/Runner/Resources/lib/* "$APP_PATH/Contents/Resources/lib/" || true

            # Sign dylibs
            for dylib in "$APP_PATH/Contents/Resources/lib/"*.dylib; do
              [ -f "$dylib" ] && codesign --force --sign - "$dylib" 2>/dev/null || true
            done
          fi

          # Copy yt-dlp binary
          if [ -f gui/macos/Runner/Resources/bin/yt-dlp ]; then
            cp gui/macos/Runner/Resources/bin/yt-dlp "$APP_PATH/Contents/Resources/bin/"
            chmod +x "$APP_PATH/Contents/Resources/bin/yt-dlp"
            codesign --force --sign - "$APP_PATH/Contents/Resources/bin/yt-dlp"
            echo "✅ yt-dlp copied and signed"
          fi

          # Verify binaries work
          echo "🧪 Testing bundled binaries..."
          "$APP_PATH/Contents/Resources/bin/transmission-daemon" --version || echo "⚠️ Transmission test failed"
          "$APP_PATH/Contents/Resources/bin/yt-dlp" --version || echo "⚠️ yt-dlp test failed"

          echo "✅ All binaries copied to app bundle"

      - name: Create ZIP
        run: |
          cd gui/build/macos/Build/Products/Release
          ditto -c -k --sequesterRsrc --keepParent trusttune_gui.app ../../../../../TrustTune-macOS.zip
          cd ../../../../..

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: TrustTune-macOS
          path: gui/TrustTune-macOS.zip

  build-windows:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.x'
          channel: 'stable'
          cache: true

      - name: Download Transmission for Windows
        shell: bash
        run: |
          TRANSMISSION_VERSION="4.0.5"
          DOWNLOAD_URL="https://github.com/transmission/transmission/releases/download/${TRANSMISSION_VERSION}/transmission-${TRANSMISSION_VERSION}-x64.msi"

          echo "📥 Downloading Transmission..."
          curl -L -o transmission.msi "$DOWNLOAD_URL"

          if [ ! -f transmission.msi ]; then
            echo "❌ Failed to download transmission.msi"
            exit 1
          fi

          echo "✅ Downloaded $(ls -lh transmission.msi)"

          # Extract MSI using 7-zip (pre-installed on GitHub Actions Windows)
          echo "📦 Extracting MSI with 7-zip..."
          EXTRACT_DIR="transmission-extracted"
          mkdir -p "$EXTRACT_DIR"

          # Extract MSI archive with 7-zip
          7z x transmission.msi -o"$EXTRACT_DIR" -y

          echo "✅ MSI extraction complete"

          # Show what was extracted
          echo "📂 Extracted contents:"
          find "$EXTRACT_DIR" -type f \( -name "*.exe" -o -name "*.dll" \) | head -20

          # Find the binaries in extracted directory
          # Windows MSI uses underscore (transmission_daemon.exe), but we need hyphen for consistency
          DAEMON_PATH=$(find "$EXTRACT_DIR" -name "transmission_daemon.exe" -type f | head -1)

          if [ -z "$DAEMON_PATH" ]; then
            echo "❌ transmission_daemon.exe not found in extracted files"
            echo "📋 Searching for all executables:"
            find "$EXTRACT_DIR" -name "*.exe" -type f
            exit 1
          fi

          echo "✅ Found transmission_daemon.exe at: $DAEMON_PATH"
          DAEMON_DIR=$(dirname "$DAEMON_PATH")

          # List what's in the directory
          echo "📂 Contents of daemon directory:"
          ls -la "$DAEMON_DIR"

          # Copy daemon and required DLLs
          mkdir -p gui/windows-binaries
          cp "$DAEMON_PATH" gui/windows-binaries/

          # Rename from underscore to hyphen (transmission_daemon.exe -> transmission-daemon.exe)
          mv gui/windows-binaries/transmission_daemon.exe gui/windows-binaries/transmission-daemon.exe
          echo "✅ Copied and renamed to transmission-daemon.exe"

          # Copy all DLLs from same directory
          cp "$DAEMON_DIR"/*.dll gui/windows-binaries/ 2>/dev/null || echo "⚠️  No DLLs in daemon directory"

          # Also check for DLLs in parent directories
          PARENT_DIR=$(dirname "$DAEMON_DIR")
          cp "$PARENT_DIR"/*.dll gui/windows-binaries/ 2>/dev/null || true

          # Rename all DLLs with underscores to hyphens (Windows Transmission MSI uses underscores)
          echo "🔄 Renaming DLLs from underscore to hyphen format..."
          cd gui/windows-binaries
          for file in *_*.dll; do
            if [ -f "$file" ]; then
              newname=$(echo "$file" | tr '_' '-')
              mv "$file" "$newname"
              echo "  Renamed: $file -> $newname"
            fi
          done
          cd ../..

          echo "📦 Bundled files:"
          ls -la gui/windows-binaries/

      - name: Download yt-dlp for Windows
        shell: bash
        run: |
          echo "📥 Downloading yt-dlp..."
          YTDLP_URL="https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp.exe"

          curl -L -o gui/windows-binaries/yt-dlp.exe "$YTDLP_URL"

          if [ ! -f gui/windows-binaries/yt-dlp.exe ]; then
            echo "❌ Failed to download yt-dlp.exe"
            exit 1
          fi

          echo "✅ Downloaded yt-dlp.exe ($(ls -lh gui/windows-binaries/yt-dlp.exe | awk '{print $5}'))"
          echo "📦 Final bundled files:"
          ls -la gui/windows-binaries/

      - name: Install dependencies
        run: |
          cd gui
          flutter pub get

      - name: Build Windows app
        run: |
          cd gui
          flutter build windows --release

      - name: Bundle Transmission with app
        shell: bash
        run: |
          BUILD_DIR="gui/build/windows/x64/runner/Release"

          echo "📂 Build directory: $BUILD_DIR"
          if [ ! -d "$BUILD_DIR" ]; then
            echo "❌ Build directory not found!"
            exit 1
          fi

          echo "📦 Pre-bundle contents:"
          ls -la "$BUILD_DIR"

          # Copy Transmission binaries to app directory
          if [ -d "gui/windows-binaries" ]; then
            echo "📥 Copying transmission binaries..."
            cp -v gui/windows-binaries/* "$BUILD_DIR/"
            echo "✅ Transmission bundled with Windows app"

            echo "📦 Post-bundle contents:"
            ls -la "$BUILD_DIR" | grep transmission
          else
            echo "❌ No bundled binaries found at gui/windows-binaries"
            exit 1
          fi

      - name: Create ZIP
        run: |
          cd gui/build/windows/x64/runner
          Compress-Archive -Path Release -DestinationPath TrustTune-Windows.zip
          Move-Item TrustTune-Windows.zip ../../../../TrustTune-Windows.zip

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: TrustTune-Windows
          path: gui/TrustTune-Windows.zip

  build-linux:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.x'
          channel: 'stable'
          cache: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev libmpv-dev mpv transmission-daemon
          cd gui
          flutter pub get

      - name: Bundle Transmission binary
        run: |
          mkdir -p gui/linux-binaries/bin

          # Copy transmission-daemon
          cp $(which transmission-daemon) gui/linux-binaries/bin/
          chmod +x gui/linux-binaries/bin/transmission-daemon

          echo "✅ Transmission binary prepared for Linux"

      - name: Download yt-dlp for Linux
        run: |
          echo "📥 Downloading yt-dlp..."
          curl -L -o gui/linux-binaries/bin/yt-dlp https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp
          chmod +x gui/linux-binaries/bin/yt-dlp
          echo "✅ Downloaded yt-dlp for Linux"
          ls -lh gui/linux-binaries/bin/yt-dlp

      - name: Build Linux app
        run: |
          cd gui
          flutter build linux --release

      - name: Bundle binaries with app
        run: |
          BUILD_DIR="gui/build/linux/x64/release/bundle"

          # Copy Transmission to bundle
          mkdir -p "$BUILD_DIR/bin"
          if [ -f gui/linux-binaries/bin/transmission-daemon ]; then
            cp gui/linux-binaries/bin/transmission-daemon "$BUILD_DIR/bin/"
            chmod +x "$BUILD_DIR/bin/transmission-daemon"
            echo "✅ Transmission bundled with Linux app"
          fi

          # Copy yt-dlp to bundle
          if [ -f gui/linux-binaries/bin/yt-dlp ]; then
            cp gui/linux-binaries/bin/yt-dlp "$BUILD_DIR/bin/"
            chmod +x "$BUILD_DIR/bin/yt-dlp"
            echo "✅ yt-dlp bundled with Linux app"
          fi

      - name: Create TAR.GZ
        run: |
          cd gui
          tar -czf TrustTune-Linux.tar.gz -C build/linux/x64/release/bundle .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: TrustTune-Linux
          path: gui/TrustTune-Linux.tar.gz

  create-release:
    needs: [build-macos, build-windows, build-linux]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/TrustTune-macOS/*
            artifacts/TrustTune-Windows/*
            artifacts/TrustTune-Linux/*
          draft: false
          prerelease: false
          generate_release_notes: true
          body: |
            ## 🎵 TrustTune Release

            **AI-powered music discovery with built-in player**

            ### 🎉 Major Update: Transmission Now Bundled!

            **No more separate installation required!** Transmission is now bundled with TrustTune for all platforms.

            ### Downloads

            - **macOS**: Download the `.zip` file (Intel & Apple Silicon)
            - **Windows**: Download the `.zip` file, extract and run
            - **Linux**: Download the `.tar.gz` file, extract and run

            ### What's New
            - ✅ **Bundled Transmission** - No separate installation needed!
            - 🎨 Improved GUI with responsive design
            - 📊 Statistics badges (albums, plays, downloads)
            - 🎵 Built-in music player with MPV
            - ⭐ Favorites and ratings for tracks
            - 🌐 Connection quality indicator
            - 📖 Updated documentation

            ### Requirements
            - **macOS**: 10.15 (Catalina) or later
            - **Windows**: Windows 10/11
            - **Linux**: Ubuntu 20.04+ / Debian 11+ / Fedora 35+

            ### Quick Start
            1. Download for your platform
            2. Extract and launch TrustTune
            3. Search for music (try: "radiohead ok computer flac")
            4. Click download - Transmission starts automatically!
            5. Enjoy your high-quality music!

            ### First-Time Users
            - **No setup required!** Just download and run
            - Transmission daemon starts automatically when needed
            - Downloads go to ~/Music by default (configurable in Settings)

            ---

            *Report bugs or request features on [GitHub Issues](https://github.com/trust-tune-net/karma-player/issues)*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
